import cv2
import dlib
import threading
import time
import os
import csv
import pandas as pd
from fpdf import FPDF
import matplotlib.pyplot as plt
from datetime import datetime
from tkinter import *
from tkinter import messagebox
from PIL import Image, ImageTk
from scipy.spatial import distance
from imutils import face_utils
from playsound import playsound

# EAR calculation
def eye_aspect_ratio(eye):
    A = distance.euclidean(eye[1], eye[5])
    B = distance.euclidean(eye[2], eye[4])
    C = distance.euclidean(eye[0], eye[3])
    return (A + B) / (2.0 * C)

# Alarm function
def sound_alarm(path):
    playsound(path)

# Save image + CSV log
def save_drowsiness_event(frame, driver_name, ear):
    folder = "drowsy_logs"
    os.makedirs(folder, exist_ok=True)

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    image_name = f"{driver_name}_{timestamp}.jpg"
    image_path = os.path.join(folder, image_name)
    cv2.imwrite(image_path, frame)

    csv_path = os.path.join(folder, "drowsy_logs.csv")
    is_new = not os.path.exists(csv_path)
    with open(csv_path, "a", newline="") as f:
        writer = csv.writer(f)
        if is_new:
            writer.writerow(["Driver", "Timestamp", "Image", "EAR"])
        writer.writerow([driver_name, timestamp, image_name, f"{ear:.3f}"])

# PDF report generator
def generate_driver_report(driver_name):
    log_file = "drowsy_logs/drowsy_logs.csv"
    if not os.path.exists(log_file):
        print("No log file found.")
        return

    df = pd.read_csv(log_file)
    df = df[df['Driver'] == driver_name]

    if df.empty:
        print(f"No records found for driver: {driver_name}")
        return

    total_events = len(df)
    first_time = df['Timestamp'].iloc[0]
    last_time = df['Timestamp'].iloc[-1]

    # Create PDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, f"Drowsiness Report: {driver_name}", ln=True, align="C")

    pdf.set_font("Arial", '', 12)
    pdf.ln(10)
    pdf.cell(0, 10, f"Total Events: {total_events}", ln=True)
    pdf.cell(0, 10, f"First Detection: {first_time}", ln=True)
    pdf.cell(0, 10, f"Last Detection: {last_time}", ln=True)

    pdf.ln(5)
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Detection Timestamps:", ln=True)
    pdf.set_font("Arial", '', 11)

    for ts in df['Timestamp']:
        pdf.cell(0, 10, f"- {ts}", ln=True)

    # Save EAR chart
    chart_path = f"drowsy_logs/{driver_name}_chart.png"
    plt.figure(figsize=(6, 2))
    plt.plot(df['Timestamp'], df['EAR'], marker='o', linestyle='-', color='red')
    plt.xticks(rotation=45, ha='right', fontsize=7)
    plt.title('EAR over Time')
    plt.tight_layout()
    plt.savefig(chart_path)
    plt.close()

    # Add chart
    pdf.add_page()
    pdf.image(chart_path, x=10, y=20, w=180)

    # Save PDF
    output_pdf = f"drowsy_logs/report_{driver_name}.pdf"
    pdf.output(output_pdf)
    print(f"Report saved as: {output_pdf}")

# Drowsiness detection
def run_detection(driver_name):
    EAR_THRESHOLD = 0.25
    CONSEC_FRAMES = 20
    counter = 0
    alarm_on = False
    saved_frame = False

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Failed to open camera.")
        return

    detector = dlib.get_frontal_face_detector()
    predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
    (lStart, lEnd) = face_utils.FACIAL_LANDMARKS_IDXS["left_eye"]
    (rStart, rEnd) = face_utils.FACIAL_LANDMARKS_IDXS["right_eye"]

    while True:
        ret, frame = cap.read()
        if not ret or frame is None:
            print("Failed to grab frame.")
            break

        try:
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        except Exception as e:
            print("Color conversion error:", e)
            break

        faces = detector(gray, 0)

        for face in faces:
            shape = predictor(gray, face)
            shape = face_utils.shape_to_np(shape)
            leftEye = shape[lStart:lEnd]
            rightEye = shape[rStart:rEnd]
            leftEAR = eye_aspect_ratio(leftEye)
            rightEAR = eye_aspect_ratio(rightEye)
            ear = (leftEAR + rightEAR) / 2.0

            if ear < EAR_THRESHOLD:
                counter += 1
                if counter >= CONSEC_FRAMES:
                    if not alarm_on:
                        alarm_on = True
                        threading.Thread(target=sound_alarm, args=("alarm.wav",), daemon=True).start()
                    if not saved_frame:
                        save_drowsiness_event(frame, driver_name, ear)
                        saved_frame = True
                    cv2.putText(frame, "DROWSINESS ALERT!", (10, 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
            else:
                counter = 0
                alarm_on = False
                saved_frame = False

            cv2.putText(frame, f"EAR: {ear:.2f}", (300, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

        cv2.imshow("Drowsiness Detection", frame)
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

    cap.release()
    cv2.destroyAllWindows()

# GUI setup
def start_detection():
    driver = driver_name_entry.get().strip()
    if not driver:
        messagebox.showwarning("Input Error", "Please enter a driver name.")
        return
    threading.Thread(target=run_detection, args=(driver,), daemon=True).start()

def generate_report():
    driver = driver_name_entry.get().strip()
    if not driver:
        messagebox.showwarning("Input Error", "Please enter a driver name.")
        return
    generate_driver_report(driver)

# Tkinter GUI
app = Tk()
app.title("Driver Drowsiness Detector")
app.geometry("400x250")
app.resizable(False, False)

Label(app, text="Enter Driver Name:", font=("Arial", 12)).pack(pady=10)
driver_name_entry = Entry(app, font=("Arial", 12), width=25)
driver_name_entry.pack()

Button(app, text="Start Detection", command=start_detection,
       font=("Arial", 12), bg="green", fg="white").pack(pady=10)

Button(app, text="Generate Report", command=generate_report,
       font=("Arial", 12), bg="blue", fg="white").pack(pady=5)

Label(app, text="Press 'q' in video window to stop", font=("Arial", 10)).pack(pady=10)

app.mainloo